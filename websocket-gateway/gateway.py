import os
import json
import requests
from flask import Flask, request, jsonify
from flask_socketio import SocketIO, emit
import logging
from datetime import datetime, timezone

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger('websocket-gateway')

app = Flask(__name__)
app.config['SECRET_KEY'] = 'websocket-secret-key'

socketio = SocketIO(
    app, 
    cors_allowed_origins="*",
    async_mode='eventlet',
    logger=True,
    engineio_logger=True
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
SERVICES = {
    'frontend': os.getenv('FRONTEND_SERVICE_URL', 'http://frontend:5000/'),
}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_sessions = {} # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
socket_sessions = {} # —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π

@app.route('/health')
def health():
    return jsonify({'status': 'OK', 'service': 'websocket-gateway'})

# HTTP endpoint –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —Å–µ—Ä–≤–∏—Å–æ–≤
@app.route('/broadcast', methods=['POST'])
def broadcast_message():
    """–°–µ—Ä–≤–∏—Å—ã –º–æ–≥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º —á–µ—Ä–µ–∑ —ç—Ç–æ—Ç endpoint"""
    data = request.get_json()
    event_name = data.get('event')
    event_data = data.get('data', {})
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
    socketio.emit(event_name, event_data, broadcast=True)
    
    return jsonify({'status': 'broadcasted', 'event': event_name})

@app.route('/send_to_user', methods=['POST'])
def send_to_user():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    data = request.get_json()
    user_id = data.get('user_id')
    event_name = data.get('event')
    event_data = data.get('data', {})
    logger.info(f'Sending data : to user: {request.sid}')
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if user_id in user_sessions:
        for sid in user_sessions[user_id]:
            socketio.emit(event_name, event_data, room=sid)
    
    return jsonify({'status': 'sent', 'user_id': user_id, 'event': event_name})

# WebSocket —Å–æ–±—ã—Ç–∏—è
@socketio.on('connect')
def handle_connect():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
    logger.info(f'‚úÖ Client connected: {request.sid}')
    
    # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    socket_sessions[request.sid] = {'authenticated': False}
    
    emit('connected', {
        'message': 'Connected to WebSocket Gateway', 
        'sid': request.sid,
        'status': 'success',
        'authenticated': False
    })

# @socketio.on('authenticate')
# def handle_authentication(data):
#     """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
#     logger.info(f'üîê Authentication attempt from {request.sid}')
    
#     token = data.get('token', 'demo-token')
#     user = authenticate_token(token)
    
#     if user:
#         # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
#         user_id = user['id']
#         socket_sessions[request.sid] = {
#             'authenticated': True,
#             'user_id': user_id,
#             'user_data': user
#         }
        
#         # –î–æ–±–∞–≤–ª—è–µ–º –≤ user_sessions
#         if user_id not in user_sessions:
#             user_sessions[user_id] = []
#         user_sessions[user_id].append(request.sid)
        
#         emit('authenticated', {
#             'success': True,
#             'user': user,
#             'message': 'Authentication successful'
#         })
#         logger.info(f"‚úÖ User {user['username']} authenticated and added to sessions")
#     else:
#         emit('auth_error', {'error': 'Invalid token'})

@socketio.on('disconnect')
def handle_disconnect():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
    logger.info(f'‚ùå Client disconnected: {request.sid}')
    
    # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–µ—Å—Å–∏–π
    session_data = socket_sessions.get(request.sid)
    if session_data and session_data.get('authenticated'):
        user_id = session_data['user_id']
        if user_id in user_sessions:
            user_sessions[user_id] = [sid for sid in user_sessions[user_id] if sid != request.sid]
            if not user_sessions[user_id]:
                del user_sessions[user_id]
    
    # –£–¥–∞–ª—è–µ–º –∏–∑ socket_sessions
    if request.sid in socket_sessions:
        del socket_sessions[request.sid]

@socketio.on('ping')
def handle_ping(data):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
    emit('pong', {
        'message': 'pong',
        'timestamp': data.get('timestamp'),
        'server_time': datetime.now(timezone.utc).isoformat()
    })

# @socketio.on('get_tasks')
# def handle_get_tasks():
#     """–ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á"""
#     print(f'üìã Tasks request from {request.sid}')
    
#     try:
#         # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ —Å–µ—Ä–≤–∏—Å–∞ web
#         response = requests.get(f"{SERVICES['web']}/api/tasks", timeout=5)
#         if response.status_code == 200:
#             tasks = response.json()
#             emit('tasks_list', {'tasks': tasks})
#             print(f"‚úÖ Sent {len(tasks)} tasks to {request.sid}")
#         else:
#             emit('error', {'error': 'Failed to fetch tasks'})
#     except Exception as e:
#         print(f"‚ùå Error fetching tasks: {e}")
#         emit('error', {'error': f'Failed to get tasks: {str(e)}'})

# @socketio.on('get_stats')
# def handle_get_stats():
#     """–ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
#     print(f'üìä Stats request from {request.sid}')
    
#     try:
#         response = requests.get(f"{SERVICES['web']}/api/stats", timeout=5)
#         if response.status_code == 200:
#             stats = response.json()
#             emit('stats_update', {'stats': stats})
#             print(f"‚úÖ Sent stats to {request.sid}")
#     except Exception as e:
#         print(f"‚ùå Error fetching stats: {e}")
#         emit('error', {'error': f'Failed to get stats: {str(e)}'})

# @socketio.on('create_task')
# def handle_create_task(data):
#     """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏"""
    
#     import logging
#     logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(message)s')
#     logging.info("–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ—á–Ω–æ –ø–æ—è–≤–∏—Ç—Å—è –≤ –ª–æ–≥–∞—Ö")

#     user_data = socket_sessions.get(request.sid)
#     if not user_data:
#         emit('error', {'error': 'Not authenticated'})
#         return

#     print(f'üÜï Task creation from {user_data["username"]}: {data.get("title")}')
    
#     try:
#         response = requests.post(
#             f"{SERVICES['web']}/api/tasks",
#             json={
#                 'title': data.get('title'),
#                 'description': data.get('description', ''),
#                 'user_id': user_data['id']
#             },
#             timeout=5
#         )
        
#         if response.status_code == 200:
#             task = response.json().get('task')
#             emit('task_created', {
#                 'message': 'Task created successfully',
#                 'task': task
#             })
            
#             # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
#             emit('task_created_broadcast', {
#                 'task': task,
#                 'user': user_data
#             }, broadcast=True, include_self=False)
            
#             print(f"‚úÖ Task created: {task['title']}")
#         else:
#             emit('error', {'error': 'Failed to create task'})
#     except Exception as e:
#         print(f"‚ùå Error creating task: {e}")
#         emit('error', {'error': f'Failed to create task: {str(e)}'})

if __name__ == '__main__':
    port = 8001
    logger.info(f"üöÄ Starting WebSocket Gateway on port {port}...")
    socketio.run(
        app, 
        host='0.0.0.0', 
        port=port, 
        debug=False, 
        allow_unsafe_werkzeug=False
    )