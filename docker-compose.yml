version: '3.10'

services:
  nginx:
    build: ./nginx
    ports:
      - "80:80"
    depends_on:
      - api-gateway
      - websocket-gateway
    volumes:
      - ./frontend/app/static:/static
    networks:
      - app-network

  api-gateway:
    build: ./api-gateway
    environment:
      - FRONTEND_SERVICE_URL=http://frontend:5000/
      - POSTGRES_SERVICE_URL=postgresql-service:5432
    ports:
      - "8000:8000"
    depends_on:
      - postgresql-service
      - frontend
    networks:
      - app-network

  websocket-gateway:
    build: ./websocket-gateway
    environment:
      FRONTEND_SERVICE_URL: http://frontend:5000/
    ports:
      - "8001:8001"  # Единственный WebSocket endpoint для всего приложения
    depends_on:
      - frontend
    networks:
      - app-network   

  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
    environment:
      - DATABASE_URL=postgresql://telemetry_user:telemetry_password@postgresql-service:5432/telemetry_db
      - SECRET_KEY=mysecretkey
      - TCP_SERVER_HOST=192.168.0.106
      - TCP_SERVER_PORT=5010
    depends_on:
      - postgresql-service
    volumes:
      - ./frontend/app/static:/app/static
    networks:
      - app-network
    
  postgresql-service:
    build: ./postgresql-service
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=telemetry_db
      - POSTGRES_USER=telemetry_user
      - POSTGRES_PASSWORD=telemetry_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network

volumes:
  postgres_data:


networks:
  app-network:
    driver: bridge
